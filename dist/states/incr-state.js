"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const utils_1 = require("~/utils");
const builder_models_1 = require("~/models/builder-models");
const state_models_1 = require("~/models/state-models");
const state_1 = require("~/states/state");
const processor_models_1 = require("~/models/processor-models");
class IncrementalState extends state_1.State {
    constructor(env, rule) {
        super(env, rule);
        this.targetToSources = new state_models_1.TargetToSources();
        this.sourceToTargets = new state_models_1.SourceToTargets();
        this.recompileSources = new Set();
    }
    /**
     * Find files requring re-compile when the given file changed.
     * First find the targets affected by the changed file, then backtrack each
     * execution context, find the original source of each target.
     *
     * File additions will fall through, but caught later in
     * [processorInput()]{@link IncrementalState#processorInput}
     *
     * @param file The added/updated/deleted file.
     * @returns List of files requiring re-compile.
     */
    findReompileSources(source) {
        let sources = new Set();
        let targets = this.sourceToTargets.get(source);
        if (!targets) {
            sources.add(source);
        }
        else {
            targets.forEach(finalTarget => {
                // Backtracking source
                // TODO: This might be unncecessary though, the key of the output
                // map is the original source (needs confirmation)
                let file = finalTarget;
                for (let i = this.contexts.length - 1; i >= 0; --i) {
                    let context = this.contexts[i];
                    file = context.output.getByTarget(file).source;
                    file = path.relative(context.sourceDir, file);
                }
                sources.add(file);
            });
        }
        utils_1.Utils.dbg() && utils_1.Utils.debug('Re-compile candidates:', sources);
        return sources;
    }
    getLastBuildContext(index) {
        return this.lastBuildContexts ? this.lastBuildContexts[index] : undefined;
    }
    nextRootDir() {
        // At this point, new context hasn't been pushed to this.contexts,
        // so index should be context length without minus one
        let lastBuildContext = this.getLastBuildContext(this.contexts.length);
        return lastBuildContext ? lastBuildContext.rootDir : super.nextRootDir();
    }
    processorInput(context, file) {
        let entry = new processor_models_1.ProcessorInputEntry(path.resolve(context.sourceDir, file), path.resolve(context.workDir, file), false, undefined);
        let lastBuildContext = this.getLastBuildContext(context.index);
        // Original source files in recompileSources should be compiled
        if (context.index === 0) {
            if (this.recompileSources.has(file)) {
                entry.shouldCompile = true;
                utils_1.Utils.dbg() && utils_1.Utils.debug(`Recompile ${file} because itself or its dependencies have changed.`);
            }
        }
        // First build, or previous build didn't advance to this step, source should be
        // compiled regardless.
        if (!lastBuildContext) {
            entry.shouldCompile = true;
        }
        else if (!lastBuildContext.output.hasSource(file)) {
            utils_1.Utils.dbg() && utils_1.Utils.debug(`Recompile ${file} because it's new or it failed last time.`);
            entry.shouldCompile = true;
        }
        if (lastBuildContext)
            utils_1.Utils.warn(file, lastBuildContext.output.hasSource(file), lastBuildContext.output.sources, lastBuildContext.output);
        // When compile is skipped, processor needs output from last build to
        // generate its own output
        if (lastBuildContext) {
            entry.lastOutput = lastBuildContext.output.getBySource(file);
        }
        return entry;
    }
    beforeBuild(task = new builder_models_1.Task()) {
        super.beforeBuild(task);
        // Compute re-compile sources
        this.recompileSources = [...task.values()]
            .reduce((all, batch) => all.concat([...batch]), [])
            .map(file => this.findReompileSources(file))
            .reduce((cands, sources) => utils_1.Utils.union(cands, sources), new Set());
        // Update file list according to file system update
        if (task.has(builder_models_1.EditEvent.ADD)) {
            task.get(builder_models_1.EditEvent.ADD).forEach(f => this.rule.files.add(f));
        }
        if (task.has(builder_models_1.EditEvent.DEL)) {
            task.get(builder_models_1.EditEvent.DEL).forEach(f => this.rule.files.delete(f));
        }
        // Reinitiate TTS
        if (this.rule.files.size) {
            this.targetToSources = new state_models_1.TargetToSources();
            this.rule.files.forEach(f => this.targetToSources.set(f, new Set([f])));
            this.sourceToTargets = this.targetToSources.flip();
        }
        this.lastBuildContexts = this.contexts;
        this.contexts = [];
    }
    /**
     * Transform processor output and save it into context.
     * @param output Results returned by processor.
     */
    saveOutput(output) {
        super.saveOutput(output);
        let context = utils_1.Utils.lastElement(this.contexts);
        // Update targetToSourcesMap and sourceToTargetsMap
        context.targetToSources.trace(this.targetToSources);
        this.targetToSources = context.targetToSources;
        context.sourceToTargets = this.sourceToTargets = this.targetToSources.flip();
        if (utils_1.Utils.dbg()) {
            utils_1.Utils.debug(`${this.name}: TTS`, this.targetToSources);
            utils_1.Utils.debug(`${this.name}: STT`, this.sourceToTargets);
        }
    }
}
exports.IncrementalState = IncrementalState;
//# sourceMappingURL=data:application/json;base64,