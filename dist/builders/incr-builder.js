"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const chokidar = require("chokidar");
const utils_1 = require("~/utils");
const builder_1 = require("~/builders/builder");
const incr_state_1 = require("~/states/incr-state");
const builder_models_1 = require("~/models/builder-models");
const BUILD_DELAY = 2000;
const CHOKIDAR_OPTIONS = {
    persistent: true,
    ignoreInitial: true,
    followSymlinks: true,
    usePolling: false,
    atomic: 500,
    alwaysStat: false,
    awaitWriteFinish: true
};
class IncrementalBuilder extends builder_1.Builder {
    constructor(rootDir, workDir, userFile, defaults) {
        super(rootDir, workDir, userFile, defaults);
        this.stateClass = incr_state_1.IncrementalState;
        this.buildPromise = Promise.resolve();
        this.editQueues = new Map();
        this.ruleToState = new Map();
    }
    shouldIgnore(file) {
        let rel = path.relative(this.env.sourceDir, file);
        let rule = this.matchRule(this.env.config, rel);
        let ignore = !rule || !rule.processors.length;
        ignore && utils_1.Utils.dbg() && utils_1.Utils.debug(`${this.name}: Ignore`, file);
        return ignore;
    }
    watchReady() {
        utils_1.Utils.info('Listening to file changes, press CTRL+C to exit.');
    }
    watchError(ex) {
        utils_1.Utils.warn('Error happened in file watcher, rebuild may fix it.', ex);
    }
    triggerBuild() {
        // Already triggered
        if (this.buildDelayTimeout !== undefined)
            return;
        this.buildDelayTimeout = setTimeout(() => this.buildPromise.then(() => {
            this.incremental();
            this.buildDelayTimeout = undefined;
        }), BUILD_DELAY);
    }
    intake(action, file) {
        let relative = path.relative(this.env.sourceDir, file);
        let queue = this.editQueues.get(relative) || new builder_models_1.EditQueue();
        queue.push(action);
        this.editQueues.set(relative, queue);
        utils_1.Utils.info(action, file);
        this.triggerBuild();
    }
    /**
     * Generate a map from updates. Key of the map is an State instance, value
     * the updated files.
     * @param {Object} Updates
     * @returns {Map<State, Object>} Tasks
     */
    generateTasks(updates) {
        let tasks = new Map();
        updates.forEach((event, file) => {
            let rule = this.fileToRule.get(file);
            if (!rule) {
                rule = this.matchRule(this.env.config, file);
                // When the file is deleted, it's not removed from fileRuleMap,
                // this is a feature, because if the file is later added again,
                // disk operations can be avoided.
                this.fileToRule.set(file, rule);
                utils_1.Utils.info(`${file} matched ${rule.sources}`);
            }
            let state = this.ruleToState.get(rule);
            let task = tasks.get(state) || new builder_models_1.Task();
            let files = task.get(event) || new Set();
            files.add(file);
            task.set(event, files);
            tasks.set(state, task);
        });
        return tasks;
    }
    incremental() {
        return __awaiter(this, void 0, void 0, function* () {
            let resolve;
            this.buildPromise = new Promise(r => resolve = r);
            let updates = new Map();
            this.editQueues.forEach((queue, file) => {
                let event = queue.reduce();
                if (event)
                    updates.set(file, event);
            });
            this.editQueues = new Map();
            let tasks = this.generateTasks(updates);
            if (utils_1.Utils.dbg()) {
                tasks.forEach((task, state) => utils_1.Utils.debug(`Build tasks for ${state.getRule().sources}`, task));
            }
            let success = true;
            let entries = Array.from(tasks.entries());
            yield Promise.all(entries.map(([state, task]) => __awaiter(this, void 0, void 0, function* () {
                let rule = state.getRule();
                state.beforeBuild(task);
                success = (yield this.invokeProcessors(rule, state)) && success;
                state.afterBuild();
            })));
            yield utils_1.Utils.cleanDirectory(this.env.targetDir, this.getAllTargets())
                .then(() => utils_1.Utils.info(`Build ${success ? 'COMPLETED' : 'INCOMPLETE'}`))
                .catch(ex => utils_1.Utils.error('Error happened during cleanup', ex));
            resolve();
        });
    }
    build() {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield _super("build").call(this);
            this.states.forEach(s => this.ruleToState.set(s.getRule(), s));
            this.watcher = chokidar.watch(this.env.sourceDir, Object.assign({}, CHOKIDAR_OPTIONS, { ignored: this.shouldIgnore.bind(this) }));
            this.watcher
                .on('ready', () => this.watchReady())
                .on('error', ex => this.watchError(ex))
                .on('add', p => this.intake(builder_models_1.EditEvent.ADD, p))
                .on('unlink', p => this.intake(builder_models_1.EditEvent.DEL, p))
                .on('change', p => this.intake(builder_models_1.EditEvent.CHG, p));
            return new Promise(resolve => this.exitPromiseResolve = resolve);
        });
    }
    exit() {
        this.watcher && this.watcher.close();
        this.buildPromise.then(() => this.exitPromiseResolve());
    }
}
exports.IncrementalBuilder = IncrementalBuilder;
;
//# sourceMappingURL=data:application/json;base64,