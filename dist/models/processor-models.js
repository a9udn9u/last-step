"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
class ProcessResult {
    constructor(importFiles = [], targetFile = undefined) {
        this.importFiles = new Set(importFiles);
        this.targetFile = targetFile;
    }
    get imports() {
        return this.importFiles;
    }
    get target() {
        return this.targetFile;
    }
}
exports.ProcessResult = ProcessResult;
class ProcessorIOEntry {
    constructor(source, target) {
        this.source = source;
        this.target = target;
    }
}
class ProcessorInputEntry extends ProcessorIOEntry {
    constructor(source, target, shouldCompile = false, lastOutput = undefined) {
        super(source, target);
        this.shouldCompile = shouldCompile;
        this.lastOutput = lastOutput;
    }
}
exports.ProcessorInputEntry = ProcessorInputEntry;
class ProcessorOutputEntry extends ProcessorIOEntry {
    constructor(source, target, contains = new Set()) {
        super(source, target);
        this.contains = contains;
    }
}
exports.ProcessorOutputEntry = ProcessorOutputEntry;
class ProcessorIO {
    constructor(sourceDir, workDir) {
        this.bySourceMap = new Map();
        this.byTargetMap = new Map();
        this.sourceDirProp = sourceDir;
        this.workDirProp = workDir;
    }
    add(entry) {
        this.bySourceMap.set(path.relative(this.sourceDir, entry.source), entry);
        this.byTargetMap.set(path.relative(this.workDir, entry.target), entry);
    }
    hasSource(key) {
        return this.bySourceMap.has(key);
    }
    getBySource(key) {
        return this.bySourceMap.get(key);
    }
    hasTarget(key) {
        return this.byTargetMap.has(key);
    }
    getByTarget(key) {
        return this.byTargetMap.get(key);
    }
    *values() {
        yield* this.bySourceMap.values();
    }
    *targetEntries() {
        yield* this.byTargetMap.entries();
    }
    *sourceEntries() {
        yield* this.bySourceMap.entries();
    }
    get sources() {
        return [...this.values()].map(entry => entry.source);
    }
    get targets() {
        return [...this.values()].map(entry => entry.target);
    }
    get sourceDir() {
        return this.sourceDirProp;
    }
    get workDir() {
        return this.workDirProp;
    }
}
class ProcessorInput extends ProcessorIO {
}
exports.ProcessorInput = ProcessorInput;
class ProcessorOutput extends ProcessorIO {
    constructor() {
        super(...arguments);
        this.failures = [];
    }
}
exports.ProcessorOutput = ProcessorOutput;
class FinalizerInput {
    constructor() {
        this.sourceSet = new Set();
    }
    add(source) {
        this.sourceSet.add(source);
    }
    *values() {
        yield* this.sourceSet.values();
    }
    get sources() {
        return [...this.sourceSet];
    }
}
exports.FinalizerInput = FinalizerInput;
//# sourceMappingURL=data:application/json;base64,