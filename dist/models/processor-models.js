"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ProcessResult {
    constructor(importFiles = [], targetFile = undefined) {
        this.importFiles = new Set(importFiles);
        this.targetFile = targetFile;
    }
    get imports() {
        return this.importFiles;
    }
    get target() {
        return this.targetFile;
    }
}
exports.ProcessResult = ProcessResult;
class ProcessorIOEntry {
    constructor(source, target) {
        this.source = source;
        this.target = target;
    }
}
class ProcessorInputEntry extends ProcessorIOEntry {
    constructor(source, target, shouldCompile = false, lastOutput = undefined) {
        super(source, target);
        this.shouldCompile = shouldCompile;
        this.lastOutput = lastOutput;
    }
}
exports.ProcessorInputEntry = ProcessorInputEntry;
class ProcessorOutputEntry extends ProcessorIOEntry {
    constructor(source, target, contains = new Set()) {
        super(source, target);
        this.contains = contains;
    }
}
exports.ProcessorOutputEntry = ProcessorOutputEntry;
class ProcessorIO {
    constructor() {
        this.bySourceMap = new Map();
        this.byTargetMap = new Map();
    }
    add(entry) {
        this.bySourceMap.set(entry.source, entry);
        this.byTargetMap.set(entry.target, entry);
    }
    hasSource(key) {
        return this.bySourceMap.has(key);
    }
    getBySource(key) {
        return this.bySourceMap.get(key);
    }
    hasTarget(key) {
        return this.byTargetMap.has(key);
    }
    getByTarget(key) {
        return this.byTargetMap.get(key);
    }
    *values() {
        yield* this.bySourceMap.values();
    }
    get sources() {
        return [...this.values()].map(entry => entry.source);
    }
    get targets() {
        return [...this.values()].map(entry => entry.target);
    }
}
class ProcessorInput extends ProcessorIO {
}
exports.ProcessorInput = ProcessorInput;
class ProcessorOutput extends ProcessorIO {
    constructor() {
        super(...arguments);
        this.failures = [];
    }
}
exports.ProcessorOutput = ProcessorOutput;
class FinalizerInput {
    constructor() {
        this.sourceSet = new Set();
    }
    add(source) {
        this.sourceSet.add(source);
    }
    *values() {
        yield* this.sourceSet.values();
    }
    get sources() {
        return [...this.sourceSet];
    }
}
exports.FinalizerInput = FinalizerInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzc29yLW1vZGVscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvcHJvY2Vzc29yLW1vZGVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBSUUsWUFBWSxjQUF3QixFQUFFLEVBQUUsYUFBcUIsU0FBUztRQUNwRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBaEJELHNDQWdCQztBQUVEO0lBSUUsWUFBWSxNQUFjLEVBQUUsTUFBYztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFFRCx5QkFBaUMsU0FBUSxnQkFBZ0I7SUFJdkQsWUFBWSxNQUFjLEVBQUUsTUFBYyxFQUFFLGdCQUF5QixLQUFLLEVBQUUsYUFBbUMsU0FBUztRQUN0SCxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQVRELGtEQVNDO0FBRUQsMEJBQWtDLFNBQVEsZ0JBQWdCO0lBSXhELFlBQVksTUFBYyxFQUFFLE1BQWMsRUFBRSxXQUF3QixJQUFJLEdBQUcsRUFBRTtRQUMzRSxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQVJELG9EQVFDO0FBRUQ7SUFJRTtRQUNFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFRO1FBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFXO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVc7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxXQUFXLENBQUMsR0FBVztRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELENBQUMsTUFBTTtRQUNMLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0Y7QUFFRCxvQkFBNEIsU0FBUSxXQUFnQztDQUNuRTtBQURELHdDQUNDO0FBRUQscUJBQTZCLFNBQVEsV0FBaUM7SUFBdEU7O1FBQ0UsYUFBUSxHQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQUE7QUFGRCwwQ0FFQztBQUVEO0lBSUU7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUFjO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxDQUFDLE1BQU07UUFDTCxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFuQkQsd0NBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFByb2Nlc3NSZXN1bHQge1xuICBwcml2YXRlIGltcG9ydEZpbGVzOiBTZXQ8c3RyaW5nPjtcbiAgcHJpdmF0ZSB0YXJnZXRGaWxlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoaW1wb3J0RmlsZXM6IHN0cmluZ1tdID0gW10sIHRhcmdldEZpbGU6IHN0cmluZyA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuaW1wb3J0RmlsZXMgPSBuZXcgU2V0KGltcG9ydEZpbGVzKTtcbiAgICB0aGlzLnRhcmdldEZpbGUgPSB0YXJnZXRGaWxlO1xuICB9XG5cbiAgZ2V0IGltcG9ydHMoKTogU2V0PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmltcG9ydEZpbGVzO1xuICB9XG5cbiAgZ2V0IHRhcmdldCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRhcmdldEZpbGU7XG4gIH1cbn1cblxuY2xhc3MgUHJvY2Vzc29ySU9FbnRyeSB7XG4gIHNvdXJjZTogc3RyaW5nO1xuICB0YXJnZXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvY2Vzc29ySW5wdXRFbnRyeSBleHRlbmRzIFByb2Nlc3NvcklPRW50cnkge1xuICBzaG91bGRDb21waWxlOiBib29sZWFuO1xuICBsYXN0T3V0cHV0OiBQcm9jZXNzb3JPdXRwdXRFbnRyeTtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIHNob3VsZENvbXBpbGU6IGJvb2xlYW4gPSBmYWxzZSwgbGFzdE91dHB1dDogUHJvY2Vzc29yT3V0cHV0RW50cnkgPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcihzb3VyY2UsIHRhcmdldCk7XG4gICAgdGhpcy5zaG91bGRDb21waWxlID0gc2hvdWxkQ29tcGlsZTtcbiAgICB0aGlzLmxhc3RPdXRwdXQgPSBsYXN0T3V0cHV0O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9jZXNzb3JPdXRwdXRFbnRyeSBleHRlbmRzIFByb2Nlc3NvcklPRW50cnkge1xuICBjb250YWluczogU2V0PHN0cmluZz47XG4gIGltcG9ydGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZywgY29udGFpbnM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpKSB7XG4gICAgc3VwZXIoc291cmNlLCB0YXJnZXQpO1xuICAgIHRoaXMuY29udGFpbnMgPSBjb250YWlucztcbiAgfVxufVxuXG5jbGFzcyBQcm9jZXNzb3JJTzxUIGV4dGVuZHMgUHJvY2Vzc29ySU9FbnRyeT4ge1xuICBwcml2YXRlIGJ5U291cmNlTWFwOiBNYXA8c3RyaW5nLCBUPjtcbiAgcHJpdmF0ZSBieVRhcmdldE1hcDogTWFwPHN0cmluZywgVD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ieVNvdXJjZU1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmJ5VGFyZ2V0TWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgYWRkKGVudHJ5OiBUKTogdm9pZCB7XG4gICAgdGhpcy5ieVNvdXJjZU1hcC5zZXQoZW50cnkuc291cmNlLCBlbnRyeSk7XG4gICAgdGhpcy5ieVRhcmdldE1hcC5zZXQoZW50cnkudGFyZ2V0LCBlbnRyeSk7XG4gIH1cblxuICBoYXNTb3VyY2Uoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ieVNvdXJjZU1hcC5oYXMoa2V5KTtcbiAgfVxuXG4gIGdldEJ5U291cmNlKGtleTogc3RyaW5nKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuYnlTb3VyY2VNYXAuZ2V0KGtleSk7XG4gIH1cblxuICBoYXNUYXJnZXQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ieVRhcmdldE1hcC5oYXMoa2V5KTtcbiAgfVxuXG4gIGdldEJ5VGFyZ2V0KGtleTogc3RyaW5nKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuYnlUYXJnZXRNYXAuZ2V0KGtleSk7XG4gIH1cblxuICAqdmFsdWVzKCk6IEl0ZXJhYmxlPFQ+IHtcbiAgICB5aWVsZCogdGhpcy5ieVNvdXJjZU1hcC52YWx1ZXMoKTtcbiAgfVxuXG4gIGdldCBzb3VyY2VzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMudmFsdWVzKCldLm1hcChlbnRyeSA9PiBlbnRyeS5zb3VyY2UpO1xuICB9XG5cbiAgZ2V0IHRhcmdldHMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbLi4udGhpcy52YWx1ZXMoKV0ubWFwKGVudHJ5ID0+IGVudHJ5LnRhcmdldCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByb2Nlc3NvcklucHV0IGV4dGVuZHMgUHJvY2Vzc29ySU88UHJvY2Vzc29ySW5wdXRFbnRyeT4ge1xufVxuXG5leHBvcnQgY2xhc3MgUHJvY2Vzc29yT3V0cHV0IGV4dGVuZHMgUHJvY2Vzc29ySU88UHJvY2Vzc29yT3V0cHV0RW50cnk+IHtcbiAgZmFpbHVyZXM6IHN0cmluZ1tdID0gW107XG59XG5cbmV4cG9ydCBjbGFzcyBGaW5hbGl6ZXJJbnB1dCB7XG4gIHNvdXJjZVNldDogU2V0PHN0cmluZz47XG4gIHNvdXJjZURpcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc291cmNlU2V0ID0gbmV3IFNldCgpO1xuICB9XG5cbiAgYWRkKHNvdXJjZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zb3VyY2VTZXQuYWRkKHNvdXJjZSk7XG4gIH1cblxuICAqdmFsdWVzKCk6IEl0ZXJhYmxlPHN0cmluZz4ge1xuICAgIHlpZWxkKiB0aGlzLnNvdXJjZVNldC52YWx1ZXMoKTtcbiAgfVxuXG4gIGdldCBzb3VyY2VzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuc291cmNlU2V0XTtcbiAgfVxufVxuXG4iXX0=